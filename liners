import argparse

import sys
import textwrap
import readline
import functools
import urllib

import itertools

import collections
from bs4 import BeautifulSoup

_VERSION_ = '0.1'
_SITEURL_ = "http://www.bashoneliners.com"
_SEARCHURL_ = "http://www.bashoneliners.com/oneliners/search/?query="
COLORMAP = {k: '\x1b[%sm' % v for k, v in {
    'a': '30', 'b': '31', 'c': '32', 'd': '33',
    'e': '34', 'f': '35', 'g': '36', 'h': '37',
    'i': '90', 'j': '91', 'k': '92', 'l': '93',
    'm': '94', 'n': '95', 'o': '96', 'p': '97',
    'A': '30;1', 'B': '31;1', 'C': '32;1', 'D': '33;1',
    'E': '34;1', 'F': '35;1', 'G': '36;1', 'H': '37;1',
    'I': '90;1', 'J': '91;1', 'K': '92;1', 'L': '93;1',
    'M': '94;1', 'N': '95;1', 'O': '96;1', 'P': '97;1',
    'x': '0', 'X': '1', 'y': '7', 'Y': '7;1',
}.items()}

class NoKeywordsException(Exception):
    pass

Colors = collections.namedtuple('Colors', 'index, title, url, metadata, abstract, prompt, reset')

def require_keywords(method):
    # Require keywords to be set before we run a GooglerCmd method. If
    # no keywords have been set, raise a NoKeywordsException.
    @functools.wraps(method)
    def enforced_method(self, *args, **kwargs):
        if not self.keywords:
            raise NoKeywordsException('No keywords.')
        method(self, *args, **kwargs)

    return enforced_method


class LinersWeb(object):
    def __init__(self, opts):
        # super().__init__()
        self.colors = Colors(*[COLORMAP[c] for c in 'GKlgxy'], reset=COLORMAP['x'])
        self._opts = opts
        self.keywords = opts.keywords

    @require_keywords
    def fetch(self):
        resutl = urllib.urlopen(_SEARCHURL_ + '+'.join(self._opts.keywords)).read()
        self.html = resutl

    def parcer(self):
        soup = BeautifulSoup(self.html, 'html.parser')
        oneliners = soup.find('div', attrs={'class': 'oneliners'})  # .find('div', attrs = {'class': 'well'})
        liners = oneliners.find_all('div', attrs={'class': 'well'})
        index=0;
        for item in itertools.islice(liners, self._opts.num):
            #Title
            title = item.find('h3',attrs={'class': 'summary'})
            index += 1
            print(self.colors.index+str(index)+self.colors.reset+" "+self.colors.title+title.a.text+self.colors.reset)
            #Hyperlink
            print(self.colors.url+_SITEURL_+title.a['href']+"\n"+self.colors.reset)
            #Code
            code = item.find('pre',attrs={'class': 'line'})
            print(self.colors.prompt+code.text+self.colors.reset)
            #Explanation
            explanation = item.find('div',attrs={'class': 'explanation'})
            print(self.colors.metadata+explanation.text+self.colors.reset)


class LinersArgumentParser(argparse.ArgumentParser):
    """Custom argument parser for liners."""

    def error(self, message):
        sys.stderr.write('%s: error: %s\n\n' % (self.prog, message))
        self.print_help(sys.stderr)
        self.exit(2)

    # Type guards
    @staticmethod
    def positive_int(arg):
        """Try to convert a string into a positive integer."""
        try:
            n = int(arg)
            assert n > 0
            return n
        except (ValueError, AssertionError):
            raise argparse.ArgumentTypeError('%s is not a positive integer' % arg)

    @staticmethod
    def nonnegative_int(arg):
        """Try to convert a string into a nonnegative integer."""
        try:
            n = int(arg)
            assert n >= 0
            return n
        except (ValueError, AssertionError):
            raise argparse.ArgumentTypeError('%s is not a non-negative integer' % arg)


def parse_args(args=None, namespace=None):
    """Parse liners arguments/options.
    Parameters
    ----------
    args : list, optional
        Arguments to parse. Default is ``sys.argv``.
    namespace : argparse.Namespace
        Namespace to write to. Default is a new namespace.
    Returns
    -------
    argparse.Namespace
        Namespace with parsed arguments / options.
    """

    argparser = LinersArgumentParser(description="Bash One-Liners from the command-line.")
    addarg = argparser.add_argument
    addarg('-n', '--count', dest='num', type=argparser.positive_int,
           default=10, metavar='N', help='show N results (default 10)')
    addarg("keywords", nargs='*', metavar='KEYWORD', help="Query to search in http://www.bashoneliners.com/")
    return argparser.parse_args(args, namespace)


def main():
    opts = parse_args()

    print("\n")
    liners = LinersWeb(opts)
    liners.fetch()
    liners.parcer()


if __name__ == '__main__':
    main()
